import pyaudio
import numpy as np
import serial
import time

SERIAL_PORT = '/dev/tty.usbserial-0001'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç ESP32
BAUD_RATE = 115200
THRESHOLD = 2000      # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è —Å–≤–µ—á–µ–Ω–∏—è
CHUNK = 512
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 22050

LIGHT_ON_TIME = 0.2

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ (–¥–ª—è –®–ò–ú) - 255
MAX_BRIGHTNESS = 255

try:
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    time.sleep(2)
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ESP32.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É: {e}")
    exit()

p = pyaudio.PyAudio()

stream = p.open(format=FORMAT,
                channels=CHANNELS,
                rate=RATE,
                input=True,
                frames_per_buffer=CHUNK)

print("üé§ –°–ª—É—à–∞—é –º–∏–∫—Ä–æ—Ñ–æ–Ω...")

last_trigger_time = 0

def volume_to_brightness(volume, min_vol=THRESHOLD, max_vol=50000):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤ —è—Ä–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 255.
    min_vol - –ø–æ—Ä–æ–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥—Ä–æ–º–∫–æ–≥–æ –∑–≤—É–∫–∞
    max_vol - –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ (–∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —è—Ä–∫–æ—Å—Ç—å = max)
    """
    if volume < min_vol:
        return 0
    elif volume > max_vol:
        return MAX_BRIGHTNESS
    else:
        # –õ–∏–Ω–µ–π–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        return int((volume - min_vol) / (max_vol - min_vol) * MAX_BRIGHTNESS)

try:
    while True:
        try:
            data = np.frombuffer(stream.read(CHUNK, exception_on_overflow=False), dtype=np.int16)
        except Exception as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            continue

        volume = np.linalg.norm(data)
        brightness = volume_to_brightness(volume)

        print(f"üéß –ì—Ä–æ–º–∫–æ—Å—Ç—å: {int(volume)}  ‚Üí  –Ø—Ä–∫–æ—Å—Ç—å: {brightness}")

        current_time = time.time()
        if brightness > 0:
            ser.write(bytes([brightness]))  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 1 –±–∞–π—Ç —Å —è—Ä–∫–æ—Å—Ç—å—é
            last_trigger_time = current_time
        else:
            # –î–µ—Ä–∂–∏–º —Å–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã–º LIGHT_ON_TIME —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥—Ä–æ–º–∫–æ–≥–æ –∑–≤—É–∫–∞
            if current_time - last_trigger_time > LIGHT_ON_TIME:
                ser.write(bytes([0]))
            else:
                ser.write(bytes([brightness]))

        time.sleep(0.1)

except KeyboardInterrupt:
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

finally:
    if stream.is_active():
        stream.stop_stream()
    stream.close()
    p.terminate()
    ser.close()
